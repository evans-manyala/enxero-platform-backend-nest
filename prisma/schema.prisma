generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id             String          @id @default(uuid())
  name           String          @db.VarChar(255)
  identifier     String?         @unique @db.VarChar(50)
  fullName       String?         @db.VarChar(255)
  shortName      String?         @db.VarChar(100)
  workPhone      String?         @db.VarChar(20)
  city           String?         @db.VarChar(100)
  address        Json?
  settings       Json?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  integrations   Integration[]
  emailLogs      EmailLog[]
  employees      Employee[]
  forms          forms[]
  leaveRequests  LeaveRequest[]
  leaveTypes     LeaveType[]
  notifications  notifications[]
  payrollConfigs PayrollConfig?
  payrollPeriods PayrollPeriod[]
  payrollRecords PayrollRecord[]
  users          User[]

  @@index([name])
  @@index([identifier])
  @@index([isActive])
  @@map("companies")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(100)
  description String?  @db.VarChar(500)
  permissions String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@index([name])
  @@index([isActive])
  @@map("roles")
}

model User {
  id                    String               @id @default(uuid())
  username              String               @unique @db.VarChar(50)
  email                 String               @unique @db.VarChar(255)
  password              String               @db.VarChar(255)
  firstName             String               @db.VarChar(100)
  lastName              String               @db.VarChar(100)
  phoneNumber           String?              @db.VarChar(20)
  avatar                String?              @db.VarChar(255)
  isActive              Boolean              @default(true)
  emailVerified         Boolean              @default(false)
  twoFactorSecret       String?              @db.VarChar(255)
  backupCodes           String[]
  resetToken            String?              @db.VarChar(255)
  resetTokenExpiry      DateTime?
  lastLogin             DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  companyId             String
  roleId                String?
  bio                   String?
  language              String?              @db.VarChar(10)
  preferences           Json?
  timezone              String?              @db.VarChar(50)
  accountStatus         String?              @db.VarChar(20)
  deactivatedAt         DateTime?
  deactivationReason    String?
  lastPasswordChange    DateTime?            @default(now())
  passwordHistory       Json?
  auditLogs             audit_logs[]
  employee              Employee?
  failedLoginAttempts   FailedLoginAttempt[]
  form_submissions      form_submissions[]
  forms                 forms[]
  approvedLeaveRequests LeaveRequest[]       @relation("ApprovedLeaveRequests")
  notifications         notifications[]
  refreshTokens         RefreshToken[]
  activities            UserActivity[]
  sessions              UserSession[]
  company               Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role                  Role?                @relation(fields: [roleId], references: [id])
  emailVerificationToken String?             @db.VarChar(255)

  @@index([email])
  @@index([username])
  @@index([isActive])
  @@index([emailVerified])
  @@index([companyId])
  @@index([roleId])
  @@index([lastLogin])
  @@index([accountStatus])
  @@index([lastPasswordChange])
  @@map("users")
  @@index([resetToken])
  @@index([emailVerificationToken])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([token])
  @@map("refresh_tokens")
}

model Employee {
  id               String          @id @default(uuid())
  employeeId       String          @db.VarChar(50)
  firstName        String          @db.VarChar(100)
  lastName         String          @db.VarChar(100)
  email            String          @unique @db.VarChar(255)
  phoneNumber      String?         @db.VarChar(20)
  department       String          @db.VarChar(100)
  position         String          @db.VarChar(100)
  status           String          @db.VarChar(50)
  hireDate         DateTime
  terminationDate  DateTime?
  salary           Decimal         @db.Decimal(10, 2)
  emergencyContact Json?
  address          Json?
  bankDetails      Json?
  taxInfo          Json?
  benefits         Json?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  companyId        String
  userId           String?         @unique
  managerId        String?
  company          Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  manager          Employee?       @relation("EmployeeManager", fields: [managerId], references: [id])
  directReports    Employee[]      @relation("EmployeeManager")
  user             User?           @relation(fields: [userId], references: [id])
  leaveBalances    LeaveBalance[]
  leaveRequests    LeaveRequest[]
  payrollRecords   PayrollRecord[]

  @@unique([employeeId, companyId])
  @@index([employeeId])
  @@index([email])
  @@index([department])
  @@index([position])
  @@index([status])
  @@index([hireDate])
  @@index([companyId])
  @@index([managerId])
  @@index([userId])
  @@map("employees")
}

model FormField {
  id         String  @id @default(uuid())
  type       String  @db.VarChar(50)
  label      String  @db.VarChar(255)
  name       String  @db.VarChar(255)
  required   Boolean @default(false)
  options    Json?
  validation Json?
  order      Int
  formId     String
  form       forms   @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@index([formId])
  @@index([type])
  @@index([name])
  @@index([order])
  @@map("form_fields")
}

model FormResponse {
  id           String           @id @default(uuid())
  fieldName    String           @db.VarChar(255)
  value        String
  submissionId String
  submission   form_submissions @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([fieldName])
  @@map("form_responses")
}

model PayrollRecord {
  id              String        @id @default(uuid())
  payPeriodStart  DateTime
  payPeriodEnd    DateTime
  grossSalary     Decimal       @db.Decimal(10, 2)
  totalDeductions Decimal       @db.Decimal(10, 2)
  netSalary       Decimal       @db.Decimal(10, 2)
  workingDays     Int
  deductions      Json?
  allowances      Json?
  status          String        @db.VarChar(50)
  processedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  employeeId      String
  companyId       String
  periodId        String
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employee        Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  period          PayrollPeriod @relation(fields: [periodId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([companyId])
  @@index([periodId])
  @@index([status])
  @@index([processedAt])
  @@index([payPeriodEnd])
  @@index([payPeriodStart])
  @@unique([employeeId, payPeriodStart])
  @@map("payroll_records")
}

model EmailLog {
  id        String   @id @default(uuid())
  recipient String   @db.VarChar(255)
  subject   String   @db.VarChar(255)
  status    String   @db.VarChar(50)
  messageId String?  @db.VarChar(255)
  error     String?
  sentAt    DateTime @default(now())
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  @@index([recipient])
  @@index([status])
  @@index([sentAt])
  @@index([companyId])
  @@map("email_logs")
}

model FailedLoginAttempt {
  id        String   @id @default(uuid())
  userId    String?
  email     String   @db.VarChar(255)
  ipAddress String?  @db.VarChar(45)
  userAgent String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([email])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("failed_login_attempts")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  ipAddress String?  @db.VarChar(45)
  userAgent String?  @db.VarChar(255)
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("user_sessions")
}

model UserActivity {
  id        String   @id @default(uuid())
  userId    String
  action    String   @db.VarChar(100)
  ipAddress String?  @db.VarChar(45)
  userAgent String?  @db.VarChar(255)
  metadata  Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("user_activities")
}

model form_submissions {
  id          String         @id
  submittedAt DateTime       @default(now())
  formId      String
  submittedBy String
  responses   FormResponse[]
  forms       forms          @relation(fields: [formId], references: [id], onDelete: Cascade)
  users       User           @relation(fields: [submittedBy], references: [id])

  @@index([formId])
  @@index([submittedAt])
  @@index([submittedBy])
}

model forms {
  id               String             @id
  title            String             @db.VarChar(255)
  description      String?
  category         String             @db.VarChar(50)
  status           String             @db.VarChar(50)
  isTemplate       Boolean            @default(false)
  settings         Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  companyId        String
  createdBy        String
  formFields       FormField[]
  form_submissions form_submissions[]
  companies        Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users            User               @relation(fields: [createdBy], references: [id])

  @@index([category])
  @@index([companyId])
  @@index([createdAt])
  @@index([createdBy])
  @@index([isTemplate])
  @@index([status])
  @@index([title])
}

model notifications {
  id        String    @id
  title     String    @db.VarChar(255)
  message   String
  type      String    @db.VarChar(50)
  category  String    @db.VarChar(50)
  data      Json?
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  userId    String
  companyId String
  companies Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([companyId])
  @@index([createdAt])
  @@index([isRead])
  @@index([type])
  @@index([userId])
}

model PayrollConfig {
  id           String   @id @default(uuid())
  companyId    String   @unique
  payFrequency String   @db.VarChar(20)
  payDay       Int
  taxSettings  Json?
  deductions   Json?
  allowances   Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@map("payroll_configs")
}

model PayrollPeriod {
  id        String          @id @default(uuid())
  companyId String
  startDate DateTime
  endDate   DateTime
  status    String          @db.VarChar(20)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  company   Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  records   PayrollRecord[]

  @@index([companyId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("payroll_periods")
}

model LeaveType {
  id          String         @id @default(uuid())
  name        String         @db.VarChar(100)
  description String?        @db.VarChar(500)
  maxDays     Int
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  companyId   String
  balances    LeaveBalance[]
  requests    LeaveRequest[]
  company     Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([name, companyId])
  @@index([companyId])
  @@index([isActive])
  @@map("leave_types")
}

model LeaveRequest {
  id             String    @id @default(uuid())
  startDate      DateTime
  endDate        DateTime
  status         String    @db.VarChar(50)
  notes          String?   @db.VarChar(500)
  approvalNotes  String?   @db.VarChar(500)
  rejectionNotes String?   @db.VarChar(500)
  approvedAt     DateTime?
  rejectedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  employeeId     String
  typeId         String
  companyId      String
  approverId     String?
  approver       User?     @relation("ApprovedLeaveRequests", fields: [approverId], references: [id])
  company        Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employee       Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  type           LeaveType @relation(fields: [typeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([typeId])
  @@index([companyId])
  @@index([status])
  @@index([approverId])
  @@map("leave_requests")
}

model LeaveBalance {
  id            String    @id @default(uuid())
  totalDays     Int
  usedDays      Int       @default(0)
  remainingDays Int
  year          Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  employeeId    String
  typeId        String
  employee      Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  type          LeaveType @relation(fields: [typeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([typeId])
  @@index([year])
  @@map("leave_balances")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SystemLog {
  id        String   @id @default(uuid())
  level     String
  message   String
  metadata  Json?
  createdAt DateTime @default(now())
}

model files {
  id          String   @id @default(uuid())
  filename    String
  storageName String
  mimetype    String
  size        Int
  description String?
  tags        String[]
  entityType  String?
  entityId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model audit_logs {
  id         String   @id @default(uuid())
  action     String
  entityType String
  entityId   String
  userId     String
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([entityType])
  @@index([entityId])
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Integration {
  id        String           @id @default(uuid())
  name      String           @db.VarChar(100)
  type      String           @db.VarChar(50)
  config    Json
  status    String           @db.VarChar(20)
  companyId String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  company   Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  logs      IntegrationLog[]

  @@unique([name, companyId])
  @@index([companyId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model IntegrationLog {
  id            String      @id @default(uuid())
  integrationId String
  message       String
  type          String      @db.VarChar(50)
  status        String      @db.VarChar(20)
  data          Json?
  createdAt     DateTime    @default(now())
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}
